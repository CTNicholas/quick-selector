{"version":3,"file":"qs.modern.js","sources":["../src/index.js"],"sourcesContent":["/*\r\n * Initialise events and template\r\n */\r\nconst addTemplate = initTemplate()\r\n\r\n/*\r\n * Exports qs function\r\n * Creates new DOM query, and returns templated result\r\n * If element array passed, return templated result\r\n */\r\nmodule.exports = function (literals, ...substitutions) {\r\n  const query = createQuery(literals, substitutions)\r\n  if (isInvalidQuery(query)) return null\r\n  if (isArray(query)) {\r\n    return addTemplate(query)\r\n  } else {\r\n    return newQuerySelector(query)\r\n  }\r\n}\r\n\r\n/*\r\n * Gets elements with querySelectorAll and adds template\r\n * If no elements, return empty array\r\n */\r\nfunction newQuerySelector(query) {\r\n  const elements = Array.from(document.querySelectorAll(query))\r\n  return elements.length > 0 ? addTemplate(elements) : []\r\n}\r\n\r\n/*\r\n * Initialises events and customMethods, then returns a function that applies\r\n * changes to an element list:\r\n\r\n * Each of these properties applies to every element in the array:\r\n * - Adds every type of eventListener to the qs element list's hidden properties\r\n *   qs`.element`.click(clickFunc)\r\n * \r\n * - Adds a .remove property, to remove eventListeners \r\n *   qs`.element`.remove.click(clickFunc)\r\n * \r\n * - Adds set, to set properties of elements\r\n *   qs`.element`.set(el => el.style.color = 'red')\r\n * \r\n * - Adds get, to get an array of properties of elements\r\n *   const getText = qs`.element`.get(el => el.innerHTML) // ['an element', 'inside another']\r\n * \r\n * - Adds only to select a single element from an index, returning an array of 1\r\n *   qs`.element`.only(1) // [ HTMLElement ]\r\n * \r\n * - Modifies the following array methods, to return an array that has been parsed by qs:\r\n *   Filter\r\n *   qs`.element`.filter(el => el.innerHTML.includes('Title'))\r\n */\r\nfunction initTemplate () {\r\n  const events = getAllEvents()\r\n  const customMethods = {\r\n    set: setFunction,\r\n    get: getFunction,\r\n    only: onlyFunction,\r\n    filter: arrayFunction\r\n  }\r\n  return function (elements) {\r\n    const customProps = {}\r\n    const removeEventObject = {}\r\n    events.forEach(event => {\r\n      addAFunction(customProps, event, eventFunction, { elements, event })\r\n      removeEventObject[event] = removeEventFunction({ elements, event })\r\n    })\r\n    customProps.remove = { value: removeEventObject }\r\n    Object.entries(customMethods).forEach(([methodName, methodFunc]) => {\r\n      addAFunction(customProps, methodName, methodFunc, { elements, methodName })\r\n    })\r\n    return Object.defineProperties(elements, customProps)\r\n  }\r\n}\r\n\r\n/*\r\n * Adds a function to customProps, to be used in defuneProperties\r\n */\r\nfunction addAFunction (customProps, propName, propFunc, funcVars) {\r\n  customProps[propName] = {\r\n    value: propFunc(funcVars)\r\n  }\r\n}\r\n\r\n/*\r\n * The next few functions are all non-enumerable properties given to the created qs objects\r\n * Or in one case, an object that enables removes event listeners\r\n * \r\n * Creates an event listener, returns elements\r\n */\r\nfunction eventFunction ({ elements, event }) {\r\n  return function (func) {\r\n    elements.forEach(element => {\r\n      element.addEventListener(event, func)\r\n    })\r\n    return elements\r\n  }\r\n}\r\n\r\n/*\r\n * Removes event listener, returns elements\r\n */\r\nfunction removeEventFunction ({ elements, event }) {\r\n  return function (func) {\r\n    elements.forEach(element => {\r\n      element.removeEventListener(event, func)\r\n    })\r\n    return elements\r\n  }\r\n}\r\n\r\n/*\r\n * Applies array method then returns qs templated array\r\n */\r\nfunction arrayFunction ({ elements, methodName }) {\r\n  return function (func) {\r\n    return addTemplate([][methodName].call(elements, func))\r\n  }\r\n}\r\n\r\n/*\r\n * Cycles through elements letting you edit elements\r\n */\r\nfunction setFunction ({ elements }) {\r\n  return function (func) {\r\n    elements.forEach(func)\r\n    return elements\r\n  }\r\n}\r\n\r\n/*\r\n * Returns elements selected in func\r\n */\r\nfunction getFunction ({ elements }) {\r\n  return function (func) {\r\n    return elements.map(element => func(element))\r\n  }\r\n}\r\n\r\n/*\r\n * Selects an element by index and returns a qs templated array containing it\r\n */\r\nfunction onlyFunction ({ elements }) {\r\n  return function (index) {\r\n    return addTemplate([elements[index]])\r\n  }\r\n}\r\n\r\n/* \r\n * Returns an array of names of all available events\r\n * Works with JSDom for testing\r\n */\r\nfunction getAllEvents () {\r\n  const HTMLDocumentEvents = Object.getOwnPropertyNames(Object.getPrototypeOf(document)) || []\r\n  const DocumentEvents = Object.getOwnPropertyNames(Object.getPrototypeOf(Object.getPrototypeOf(document))) || []\r\n  const allEventNames = HTMLDocumentEvents.concat(DocumentEvents).filter(eventName =>\r\n    !eventName.indexOf('on') && (document[eventName] == null || typeof document[eventName] == 'function')\r\n  ).map(eventName => eventName.substr(2))\r\n  return allEventNames.length > 0 ? allEventNames : []\r\n}\r\n\r\n/*\r\n * Takes arguments from a tagged template literal\r\n * If valid HTML element array submitted as first argument, return\r\n * Else If array entered as a substitution, and no literals, return substitution array\r\n * Else If return a query string to be used with document.querySelectorAll\r\n * If not valid, return null\r\n */\r\nfunction createQuery (literals, substitutions) {\r\n  if (isArray(literals) && isElement(...literals)) {\r\n    return literals\r\n  } else if (isArray(literals, substitutions)) {\r\n    if (literals.join() === '' && isElement(...substitutions)) {\r\n      return substitutions\r\n    } else {\r\n      return combineTemplateArrays(literals, substitutions) || null\r\n    }\r\n  } else if (isString(literals)) {\r\n    return literals\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\n/*\r\n * Combines two arrays into one string, one index at a time\r\n * If undefined, uses an empty string\r\n */ \r\nfunction combineTemplateArrays(literals, substitutions) {\r\n  return literals.map((literal, index) => {\r\n    return (literal || '') + (substitutions[index] || '')\r\n  }).join('')\r\n}\r\n\r\n/*\r\n * Check if arguments are valid DOM elements\r\n */\r\nfunction isElement (...args) {\r\n  return args.every(arg => arg instanceof Element || arg instanceof HTMLDocument )\r\n}\r\n\r\n/* \r\n * Check if arguments are valid arrays\r\n*/\r\nfunction isArray (...args) {\r\n  return args.every(arg => Array.isArray(arg))\r\n}\r\n\r\n/* \r\n * Check if arguments are valid strings\r\n*/\r\nfunction isString (...args) {\r\n  return args.every(arg => typeof arg === 'string' || arg instanceof String)\r\n}\r\n\r\n/*\r\n * Checks if valid query\r\n */\r\nfunction isInvalidQuery(query) {\r\n  return !query || query.length === 0 || query === '[object Object]'\r\n}\r\n"],"names":["addTemplate","events","HTMLDocumentEvents","Object","getOwnPropertyNames","getPrototypeOf","document","DocumentEvents","allEventNames","concat","filter","eventName","indexOf","map","substr","length","getAllEvents","customMethods","set","setFunction","get","getFunction","only","onlyFunction","arrayFunction","elements","customProps","removeEventObject","forEach","event","addAFunction","eventFunction","func","element","removeEventListener","removeEventFunction","remove","value","entries","methodName","methodFunc","defineProperties","initTemplate","propName","propFunc","funcVars","addEventListener","call","index","isElement","args","every","arg","Element","HTMLDocument","isArray","Array","module","exports","literals","substitutions","query","join","literal","combineTemplateArrays","String","isString","createQuery","isInvalidQuery","from","querySelectorAll","newQuerySelector"],"mappings":"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"}